Header file:

#define MAX_KEYMONITOR 4
#define MAX_MACRO 100

//Fuction prototypes:

//Memory
void getUseage();

//GPU
void getFPS();
void getTemp();

//CPU
void getTemp();
void getSpeed();
void getUseage();

//TOOLS

//Macro
void record();
void play();

//Keyboard
getKeys();

//Autoclicker
click();

//struct to keep metrics
typedef struct {
      int CPUuse;
      boolean CPUuseIsOn;
      int CPUtemp;
      boolean CPUtempIsOn;
      int CPUspeed;
      boolean CPUspeedIsOn;
      int GPUfps;
      boolean GPUfpsIsOn;
      int GPUtemp;
      boolean GPUtempIsOn;
      int MemoryUse;
      boolean MemoryUseIsOn;
      int refreshRate;
} Metrics;

//struct to keep session highs/lows
typedef struct{
    int CPUuseHigh;
    int CPUuseLow;
    boolean CPUuseHLIsOn;
    int CPUtempHigh;
    int CPUtempLow;
    boolean CPUtempHLIsOn;
    int CPUspeedHigh;
    int CPUspeedLow;
    boolean CPUspeedHLIsOn;
    int GPUfpsHigh;
    int GPUfpsLow;
    boolean GPUfpsHLIsOn;
    int GPUtempHigh;
    int GPUtempLow;
    boolean GPUtempHLIsOn;
    int MemoryUseHigh;
    int MemoryUseLow;
    boolean MemoryUseHLIsOn;
}HighLow;

//struct to keep keys pressed
typdef struct {
    boolean isOn;
    short keys[MAX_KEYMONITOR];
} Keyboard;

typedef struct{
    short activationKey;
}Autoclicker;

//struct to keep macros
typdef struct {
    boolean isRecording;
    boolean isOn;
    boolean toPlay;
    short keysRecorded[MAX_MACRO];
    int keyIndex;
    short activationKey; //set by text box in the GUI
} Macro;

CPU class:
void getTemp()
    call MSAcpi_ThermalZoneTemperature through WMI(still needs looking into)
    set Metrics struct ‘CPUTemp’ value
void getUseage()
    call to HKEY_PERFORMANCE_DATA (link)
    set Metrics struct  ‘CPUuse’ value 
void getSpeed()
    time a single instruction in a loop to get clock speed (i++?)
set Metrics struct  ‘CPUspeed’ value 

GPU class:
enum type {NVIDIA, AMD, onBoard, failure};
setType()
    query the OS for what kind of card the user has
    set type to card type
void getTemp()
    if(type==NVIDIA) //use a switch
        call NVIDIA query for temperature
        set Metrics struct ‘GPUtemp’ value
    else if(type==AMD)
        call AMD query for temperature
        set Metrics struct ‘GPUtemp’ value
    else if(type== onboard)
        set Metrics struct ‘GPUtemp’ value to ‘CPUtemp’
    else
        set Metrics struct ‘GPUtemp’ value to NULL
    
void getFPS() //may not be possible without docking onto separate program
    
Memory class:
include <windows.h>
void getUseage()
call GlobalMemorStatusEx function memory
set Metrics struct ‘MemoryUse’ value

Keyboard class:
void getKeys() {
    //it will go through all key options and if they key is currently pressed it will add to the array.
    if (keypressed == vk code) {
        keyboard.keys[i] = vkcode;
        if (macro.recording && macro.keysRecorded[macro.keyIndex - 1] != vkcode) //needs to be timed so you can enter same key twice
            macro.keysRecorded[macro.keyIndex] = vkcode;
        i++;
    }

Autoclicker class:
#include windows.h
#define NUM_CLICKS 5

void click() {
    for(int i =0; i < NUM_CLICKS; i++) {
      call (MOUSEEVENTF_LEFTDOWN) ;
}

Macro class:

void record() {
    if( Macro.isRecording) {getKeys();}
}

void play() {
    for(int i= 0 ; i < Macro.keyIndex; i++)
    {
      keybd_event(Macro.keysRecorded[i]);
    }
}

Main class:

#include <time.h>
void setHighLow();

main() {
    //create metric class objects and initialize the gpu type
    GPU gpu;
      CPU cpu;
      Keyboard keyboard;
      Autoclicker autoClicker;
      Memory mem;
      gpu->setType();

      while(true) { //main loop of program
          /* To throttle based on input, program will implement a timer that will count up from start and metrics will be called if time elapsed is greater than refreshRate value*/
      int now = clock();
          if (now - Lastclock > Metrics.refreshRate) {
      Lastclock = now;
      if(CPUuseIsOn)
      cpu->getUsage();
      if(CPUtempIsOn)
                  cpu->getTemp();
      if(CPUspeedIsOn)
      cpu->getSpeed();
if(MemoryUseIsOn)
      mem->getUsage();
if(GPUfpsOn)
      gpu->getFPS();
if(GPUtempIsOn)
      gpu->getTemp();
}
if (keyboard.isOn) {keyboard->getKeys;}    
if (autoclicker.isOn) {
      if(autoClicker.activationKey is pressed)
      Autoclicker->click();
}
if (macrorecorder.isOn){
    if(Macro.isRecording)
        macro->record();
      else if(Macro.activationKey is pressed)
          macro->play();
      }

      }
}

void setHighLow(){
    if (HighLow.CPUuseHigh < Metrics.CPUuse) {
      HighLow.CPUuseHigh = Metrics.CPUuse;
    }
    if (HighLow.CPUuseLow > Metrics.CPUuse) {
        HighLow.CPUuseLow = Metrics.CPUuse;
      }

    if (HighLow.CPUtempHigh < Metrics.CPUtemp) {
        HighLow.CPUtempHigh = Metrics.CPUtemp;
    }
    if (HighLow.CPUtempLow > Metrics.CPUtemp) {
        HighLow.CPUtempLow = Metrics.CPUtemp;
      }
    
    if (CPUspeedHigh < Metrics.CPUspeed) {
        HighLow.CPUspeedHigh = Metrics.CPUspeed;
    }
    if (CPUspeedLow > Metrics.CPUspeed) {
        HighLow.CPUspeedLow = Metrics.CPUspeed;
    }

    
    if (GPUfpsHigh < Metrics.GPUfps) {
        HighLow.GPUfpsHigh = Metrics.GPUfps;
    }
    if (GPUfpsLow > Metrics.GPUfps) {
        HighLow.GPUfpsLow = Metrics.GPUfps;
    }

    
    if (GPUtempHigh < Metrics.GPUtemp) {
        HighLow.GPUtempHigh = Metrics.GPUtemp;
    }
    if (GPUtempLow > Metrics.GPUtemp) {
        HighLow.GPUtempLow = Metrics.GPUtemp;
    }
    
    if (MemoryUseHigh < Metrics.MemoryUse) {
        HighLow.MemoryUseHigh = Metrics.MemoryUse;
    }
    if (MemoryUseLow > Metrics.MemoryUse) {
        HighLow.MemoryUseLow = Metrics.MemoryUse;
    }
}
    
GUI:

MainWindow class:

displays all information on the main window
it also will have the two menus in it.
it will order and display the metric graphic, high / low graphic, and/or graph graphics.

//access the metrics by using the struct in the header file

Display class:
it will display text metrics and display into box
it will either display the metric alone or display the high and low

Graph class:
will have the display for a graph and will collect data over time and store 

DisplayKeyboard class
creates the keyboard display and displays what keys will be pressed

DisplayMacro class
this will display macro information

DisplayAutoclicker class
create the autoclicker display with record and on/off buttons
